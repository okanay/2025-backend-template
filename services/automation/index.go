package AutomationService

import (
	"fmt"
	"log"
	"sync"
	"time"

	"github.com/robfig/cron/v3"
)

// JobFunc, zamanlandÄ±ÄŸÄ±nda Ã§alÄ±ÅŸtÄ±rÄ±lacak olan fonksiyonun tipidir.
type JobFunc func()

// jobState, bir iÅŸin mevcut durumunu belirtir.
type jobState string

const (
	StateIdle    jobState = "idle"
	StateRunning jobState = "running"
)

// jobInfo, tek bir iÅŸin tÃ¼m bilgilerini ve durumunu barÄ±ndÄ±rÄ±r.
type jobInfo struct {
	Key         string
	IsRecurring bool
	Job         JobFunc
	EntryID     cron.EntryID
	State       jobState
}

// AutomationService, periyodik ve tek seferlik gÃ¶revleri gÃ¼venli bir ÅŸekilde yÃ¶netir.
type AutomationService struct {
	mu       sync.RWMutex
	cron     *cron.Cron
	registry map[string]*jobInfo // TÃ¼m iÅŸlerin merkezi kayÄ±t defteri
}

// NewService, yeni bir otomasyon servisi oluÅŸturur ve baÅŸlatÄ±r.
func NewService() *AutomationService {
	service := &AutomationService{
		cron:     cron.New(cron.WithSeconds()), // Saniye hassasiyetini aktif et
		registry: make(map[string]*jobInfo),
	}
	service.cron.Start()
	log.Println("âœ… [AUTOMATION] Service started and running.")
	return service
}

// Stop, tÃ¼m zamanlanmÄ±ÅŸ gÃ¶revleri durdurur ve kaynaklarÄ± temizler.
func (s *AutomationService) Stop() {
	s.cron.Stop()
	log.Println("ğŸ›‘ [AUTOMATION] Service stopped.")
}

// Add, sisteme periyodik olarak Ã§alÄ±ÅŸacak statik bir iÅŸ ekler.
// Genellikle sunucu baÅŸlangÄ±cÄ±nda Ã§aÄŸrÄ±lÄ±r.
// Spec: Standart cron formatÄ± (Ã¶rn: "@every 6h", "0 4 * * *").
func (s *AutomationService) Add(key string, spec string, job JobFunc) error {
	s.mu.Lock()
	defer s.mu.Unlock()

	// Wrapper fonksiyon, asÄ±l iÅŸin etrafÄ±nda durum kontrolÃ¼ yapar.
	wrappedJob := s.createJobWrapper(key)

	entryID, err := s.cron.AddFunc(spec, wrappedJob)
	if err != nil {
		log.Printf("[AUTOMATION] ERROR adding cron job for key '%s': %v", key, err)
		return err
	}

	// Ä°ÅŸi merkezi kayÄ±t defterine ekle.
	s.registry[key] = &jobInfo{
		Key:         key,
		IsRecurring: true,
		Job:         job,
		EntryID:     entryID,
		State:       StateIdle,
	}

	log.Printf("[AUTOMATION] Added recurring job: '%s' with spec '%s'", key, spec)
	return nil
}

// Schedule, tek seferlik bir iÅŸi gelecekteki belirli bir zamanda Ã§alÄ±ÅŸmak Ã¼zere zamanlar.
// EÄŸer aynÄ± anahtarla mevcut bir zamanlama varsa, Ã¼zerine yazar.
func (s *AutomationService) Schedule(key string, at time.Time, job JobFunc) error {
	s.mu.Lock()
	defer s.mu.Unlock()

	// EÄŸer bu key ile eski bir gÃ¶rev varsa, Ã¶nce onu temizle.
	s.internalRemove(key)

	// Ã‡alÄ±ÅŸtÄ±ktan sonra kendini temizleyecek Ã¶zel bir wrapper oluÅŸtur.
	wrappedJob := func() {
		s.createJobWrapper(key)() // Normal wrapper'Ä± Ã§alÄ±ÅŸtÄ±r
		s.internalRemove(key)     // Ä°ÅŸ bittikten sonra kendini sil
	}

	// Cron'un anlayacaÄŸÄ± tek seferlik zaman formatÄ±nÄ± oluÅŸtur.
	spec := fmt.Sprintf("%d %d %d %d %d *", at.Second(), at.Minute(), at.Hour(), at.Day(), at.Month())

	entryID, err := s.cron.AddFunc(spec, wrappedJob)
	if err != nil {
		log.Printf("[AUTOMATION] ERROR scheduling one-off job for key '%s': %v", key, err)
		return err
	}

	// Ä°ÅŸi kayÄ±t defterine ekle.
	s.registry[key] = &jobInfo{
		Key:         key,
		IsRecurring: false,
		Job:         job,
		EntryID:     entryID,
		State:       StateIdle,
	}

	log.Printf("[AUTOMATION] Scheduled one-off job: '%s' for %s", key, at.Format(time.RFC3339))
	return nil
}

// Trigger, kayÄ±tlÄ± periyodik bir iÅŸi anahtarÄ±yla manuel olarak ve gÃ¼venli bir ÅŸekilde tetikler.
func (s *AutomationService) Trigger(key string) error {
	s.mu.RLock()
	job, exists := s.registry[key]
	s.mu.RUnlock()

	if !exists {
		return fmt.Errorf("job with key '%s' not found in registry", key)
	}

	if !job.IsRecurring {
		return fmt.Errorf("cannot manually trigger a one-off scheduled job: '%s'", key)
	}

	log.Printf("[AUTOMATION] Manual trigger for job: '%s'", key)
	// GÃ¼venli wrapper'Ä± yeni bir goroutine iÃ§inde Ã§alÄ±ÅŸtÄ±r.
	go s.createJobWrapper(key)()

	return nil
}

// CancelSchedule, zamanlanmÄ±ÅŸ tek seferlik bir gÃ¶revi iptal eder.
func (s *AutomationService) CancelSchedule(key string) {
	s.mu.Lock()
	defer s.mu.Unlock()
	s.internalRemove(key)
}

// internalRemove, kilitleme olmadan iptal/silme iÅŸlemini yapar.
func (s *AutomationService) internalRemove(key string) {
	if job, exists := s.registry[key]; exists {
		s.cron.Remove(job.EntryID)
		delete(s.registry, key)
		log.Printf("[AUTOMATION] Canceled/Removed job: '%s'", key)
	}
}

// createJobWrapper, bir iÅŸin gÃ¼venli Ã§alÄ±ÅŸmasÄ±nÄ± saÄŸlayan bir sarmalayÄ±cÄ± fonksiyon oluÅŸturur.
// Bu fonksiyon, Ã§akÄ±ÅŸmalarÄ± (race condition) ve panik durumlarÄ±nÄ± yÃ¶netir.
func (s *AutomationService) createJobWrapper(key string) JobFunc {
	return func() {
		s.mu.Lock()
		job, exists := s.registry[key]
		if !exists {
			s.mu.Unlock()
			log.Printf("[AUTOMATION] CRITICAL: Tried to run a job that no longer exists in registry: '%s'", key)
			return
		}

		if job.State == StateRunning {
			log.Printf("[AUTOMATION] SKIPPED job: '%s' is already running.", key)
			s.mu.Unlock()
			return
		}

		job.State = StateRunning
		s.mu.Unlock()

		log.Printf("[AUTOMATION] STARTED job: '%s'", key)
		defer func() {
			if r := recover(); r != nil {
				log.Printf("[AUTOMATION] FATAL: RECOVERED from panic in job '%s': %v", key, r)
			}

			s.mu.Lock()
			// Ä°ÅŸ bittiÄŸinde durumu tekrar "idle" yap.
			if job, exists := s.registry[key]; exists {
				job.State = StateIdle
			}
			s.mu.Unlock()
			log.Printf("[AUTOMATION] FINISHED job: '%s'", key)
		}()

		// KayÄ±t defterindeki asÄ±l iÅŸ fonksiyonunu Ã§alÄ±ÅŸtÄ±r.
		job.Job()
	}
}
