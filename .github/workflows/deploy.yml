name: Deploy to Production with Zero Downtime

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ROOT: "/root/2025-backend-template"
  PORT_A: 4040
  PORT_B: 4041
  KEEP_RELEASES: 3 # Sunucuda tutulacak eski versiyon sayısı
  HEALTH_CHECK_PATH: "/"
  BUILD_COMMAND: "/usr/local/go/bin/go build -o main ."

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          port: ${{ secrets.PORT }}
          script: |
            set -e # Herhangi bir komut başarısız olursa script'i anında durdur

            # --- 1. DEPLOYMENT ORTAMINI HAZIRLA ---
            RELEASES_DIR="${{ env.PROJECT_ROOT }}/releases"
            STATE_DIR="${{ env.PROJECT_ROOT }}/state"
            RELEASE_ID=$(date +%Y%m%d%H%M%S)
            NEW_RELEASE_DIR="$RELEASES_DIR/$RELEASE_ID"
            LIVE_PORT_FILE="$STATE_DIR/live.port"
            LIVE_PID_FILE="$STATE_DIR/app.pid"
            UPSTREAM_CONF_FILE="/etc/nginx/includes/backend_upstream.conf"

            echo "🚀 Deployment Başlatılıyor: Release ID $RELEASE_ID"

            mkdir -p $RELEASES_DIR
            mkdir -p $STATE_DIR

            # --- 2. YENİ VERSİYONU İNDİR VE BUILD ET ---
            echo "⬇️  Kod yeni release klasörüne klonlanıyor: $NEW_RELEASE_DIR"
            git clone https://github.com/${{ github.repository }}.git $NEW_RELEASE_DIR
            cd $NEW_RELEASE_DIR

            echo "🔨 Uygulama build ediliyor..."
            ${{ env.BUILD_COMMAND }}
            echo "✅ Build tamamlandı."

            # --- 3. PORTLARI BELİRLE ---
            # Mevcut canlı portu oku. Eğer dosya yoksa (ilk deploy), PORT_A'yı hedefle.
            if [ -f "$LIVE_PORT_FILE" ]; then
              CURRENT_PORT=$(cat $LIVE_PORT_FILE)
            else
              echo "ℹ️ 'live.port' dosyası bulunamadı. İlk deploy varsayılıyor."
              CURRENT_PORT="" # Mevcutta çalışan port yok
            fi

            # Yeni portu belirle
            if [ "$CURRENT_PORT" = "${{ env.PORT_A }}" ]; then
              NEW_PORT=${{ env.PORT_B }}
            else
              NEW_PORT=${{ env.PORT_A }}
            fi
            echo "🔄 Port Değişimi: Mevcut: '$CURRENT_PORT' -> Yeni Hedef: '$NEW_PORT'"

            # --- 4. YENİ UYGULAMAYI BAŞLAT VE TEST ET ---
            echo "🩺 Yeni versiyon $NEW_PORT portunda sağlık kontrolü için başlatılıyor..."
            # Uygulamayı arkaplanda başlat ve PID'sini SADECE bu release'e özel bir dosyaya yaz
            (PORT=$NEW_PORT nohup ./main &> app.log & echo $! > ./app.pid.temp)

            sleep 8 # Uygulamanın başlaması için makul bir süre bekle

            HEALTH_CHECK_URL="http://localhost:$NEW_PORT${{ env.HEALTH_CHECK_PATH }}"
            echo "🔎 Sağlık kontrolü yapılıyor: $HEALTH_CHECK_URL"

            # 3 deneme ile sağlık kontrolü yap
            if ! curl -s --fail --retry 3 --retry-delay 5 $HEALTH_CHECK_URL; then
              echo "❌ Sağlık kontrolü BAŞARISIZ! Deployment geri alınıyor."
              NEW_PID=$(cat ./app.pid.temp)
              kill $NEW_PID # Başarısız olan yeni süreci öldür
              rm -rf $NEW_RELEASE_DIR # Başarısız release'i sil
              exit 1
            fi
            echo "✅ Sağlık kontrolü BAŞARILI."

            # --- 5. NGINX'İ YENİ PORTA YÖNLENDİR (SIFIR KESİNTİ) ---
            echo "🔄 Nginx yeni porta yönlendiriliyor..."
            echo "server 127.0.0.1:$NEW_PORT;" | sudo tee $UPSTREAM_CONF_FILE
            sudo nginx -s reload # Bağlantıları kesmeden Nginx'i yeniden yükle
            echo "✅ Nginx başarıyla $NEW_PORT portuna yönlendirildi."

            # --- 6. ESKİ UYGULAMAYI GÜVENLİ BİR ŞEKİLDE DURDUR ---
            if [ -f "$LIVE_PID_FILE" ]; then
              OLD_PID=$(cat $LIVE_PID_FILE)
              echo "🛑 Eski versiyon (PID: $OLD_PID, Port: $CURRENT_PORT) durduruluyor..."
              # Sadece PID hala çalışıyorsa kill komutunu gönder
              if ps -p $OLD_PID > /dev/null; then
                 kill $OLD_PID
                 echo "✅ Eski süreç durduruldu."
              else
                 echo "ℹ️ Eski PID ($OLD_PID) zaten çalışmıyor."
              fi
            else
              echo "ℹ️ Durdurulacak eski bir süreç (PID dosyası) bulunamadı."
            fi

            # --- 7. DURUMU GÜNCELLE VE TEMİZLİK YAP ---
            # Canlı port ve PID bilgilerini yeni deploy için güncelle
            echo $NEW_PORT > $LIVE_PORT_FILE
            mv ./app.pid.temp $LIVE_PID_FILE

            echo "🧹 Eski versiyonlar temizleniyor..."
            cd $RELEASES_DIR && ls -1tr | head -n -${{ env.KEEP_RELEASES }} | xargs -r rm -rf

            echo "🎉 Deployment başarıyla tamamlandı! Aktif Port: $NEW_PORT"
